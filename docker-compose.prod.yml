services:
  app:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    image: myapp:production
    restart: always
    env_file: .env
    # Remove the volume for production; bake the code into the image
    # volumes:
    #   - .:/var/www/html
    ports:
      - '9000:80' # Expose the app's internal port (e.g., 80) to a port on the host (e.g., 9000)
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - netdocs
    depends_on:
      - pgsql
      - redis
      - minio
      - elasticsearch
    healthcheck:
      test: ['CMD', 'php', 'artisan', 'health:check'] # Adjust based on your app's healthcheck command
      interval: 30s
      timeout: 10s
      retries: 3

  pgsql:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - 'pgsql_data:/var/lib/postgresql/data'
      - './postgresql.conf:/etc/postgresql/postgresql.conf'
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    networks:
      - netdocs
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', '${DB_DATABASE}', '-U', '${DB_USERNAME}']
      interval: 30s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - 'redis_data:/data'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    networks:
      - netdocs
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio:latest
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - 'minio_data:/data'
    command: 'minio server /data --console-address ":9001"'
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    networks:
      - netdocs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.2
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    volumes:
      - esdata:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - netdocs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  netdocs:
    driver: bridge

volumes:
  pgsql_data:
  redis_data:
  minio_data:
  esdata:
